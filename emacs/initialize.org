#+TITLE: Emacs configuration
#+AUTHOR: David Charte

* References

Other emacs configuration files are a huge inspiration for this one, mainly [[https://github.com/M42/.emacs.d][M42's]] and [[https://github.com/andreshp/.emacs.d/][andreshp's]].

* TODO

** org-ref

#+BEGIN_SRC emacs-lisp
(use-package org-ref)
#+END_SRC

* Initializations

** Support for accented characters

#+BEGIN_SRC emacs-lisp
(require 'iso-transl)
#+END_SRC

** Default to always install required packages

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

** Smooth scroll

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0)
(setq scroll-conservatively 10000)
(setq scroll-preserve-screen-position t)
(global-auto-composition-mode -1)
#+END_SRC

** Show column number

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

** Theming
#+BEGIN_SRC emacs-lisp
  ;;(use-package base16-theme
  ;;  :ensure t
  ;;  :config
  ;;  (load-theme 'base16-chalk t))
  ;; (use-package xresources-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'xresources t))
  ;(load-file "~/.emacs.d/colors.el")
  ;(load-theme 'wal t)
#+END_SRC

** HiDPI support

In GNOME 3.26, the settings daemon replaces the system's current dpi value to 96. This makes fonts in Emacs too small. Since there are no other GUI elements than text, a quick fix is just to make it larger:

#+BEGIN_SRC emacs-lisp
;; (set-face-attribute 'default nil :height 190)
#+END_SRC


** Org-clock hooks

#+BEGIN_SRC emacs-lisp
(add-hook 'org-clock-in-hook 'save-buffer)
(add-hook 'org-clock-out-hook 'save-buffer)
(find-file-noselect "~/Documentos/timelog.org")
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(use-package nord-theme
  :ensure t
  :load-path "themes")
(if (daemonp)
    (add-hook 'after-make-frame-functions
        (lambda (frame)
            (select-frame frame)
            (load-theme 'nord t)))
    (load-theme 'nord t))
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Emacs for lazy people

Emacs is one of the most powerful, extensible editors out there. However, learning to use it is not an easy task, and I'm just really lazy. The following are some packages that I hope will make your life way easier. And if you already use Emacs, I encourage you to try them and see if they help you get a more comfortable development environment.

** Smex

In Emacs we use M-x (<kbd>Alt</kbd>+<kbd>X</kbd>) to enter any command without the need for a dedicated keyboard shortcut or menu entry. By default Emacs doesn't help much while writing a command, and it can be challenging to remember many of them, as well as tedious writing the long ones (=package-list-packages= anyone?). [[https://github.com/nonsequitur/smex/][Smex]] is a M-x enhancement for Emacs, built on top of Ido, which means it will try to predict and autocomplete commands as you write them.

In order to install and enable Smex, add the following code to your initialization file:

#+BEGIN_SRC emacs-lisp
(use-package smex
:config (smex-initialize))
#+END_SRC

** Ergoemacs

If you're just starting to use emacs, you may find it difficult to learn all the new keybindings. If you're a long-time user, you may have experienced repetitive strain injury (RSI), also known as [[https://en.wikipedia.org/wiki/Emacs#Emacs_pinky][Emacs pinky]]. Don't worry, I've got just the solution for you: [[https://ergoemacs.github.io/index.html][ergoemacs-mode]] is a minor-mode that sets ergonomic and well-known keybindings for common editing functions, with the aim of reducing RSI as well as adding some familiarity to the use of emacs.

Just as before, add the following code to your initialization file and restart Emacs to use it:

#+BEGIN_SRC emacs-lisp
(use-package ergoemacs-mode
:init
  (setq ergoemacs-theme nil)
  (setq ergoemacs-keyboard-layout "es")
:config
  (ergoemacs-mode 1)
)
#+END_SRC

You can check [[https://ergoemacs.github.io/key-setup.html][your new keybinding layout]]. Remember that, after enabling Ergoemacs, the keyboard shortcut that allows you to enter a custom command becomes <kbd>Alt</kbd>+<kbd>A</kbd>.

** Which-key

[[https://github.com/justbur/emacs-which-key][Which-key]] displays the key bindings following your currently entered incomplete command. That way, when you can't remember which key to press, you'll have a cheat sheet in a couple of seconds.

#+BEGIN_SRC emacs-lisp
(use-package which-key
:config (which-key-mode))
#+END_SRC

[[/media/datos/Documents/undefined/emacs-which-key.png]]

** Auto-reload stuff

When using version control, files generally change while having them open in the editor. If this happens, I expect my editor to refresh the files so that I don't write on an old version. Emacs doesn't enable this behavior by default, rather letting the user decide if they want to reload files. Instead, we can set it to automatically reload files from disk when changed via these configuration lines (source: [[http://pragmaticemacs.com/emacs/automatically-revert-buffers/][Pragmatic Emacs]]):

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC

* Additional keybindings

#+BEGIN_SRC emacs-lisp
;(global-set-key [f8] 'neotree-toggle)
(global-set-key (kbd "<f5>") 'magit-status)
(global-set-key [f12] 'ess-eval-region-or-line-and-step)
(global-set-key (kbd "C-k") 'comment-or-uncomment-region)
;(global-set-key (kbd "C-x C-a") 'mark-whole-buffer)
#+END_SRC

** Switch buffers with Ctrl+Tab

#+BEGIN_SRC emacs-lisp
;; Switch buffers with ctrl-tab
(global-set-key [C-tab] 'other-window)
(global-set-key [C-iso-lefttab] 
    (lambda ()
      (interactive)
      (other-window -1)))
(define-key org-mode-map [C-tab] nil)
#+END_SRC

* Snippets

** Yasnippet

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

* Per language setup

** Org mode

*** COMMENT Initializations

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)

(use-package org
:mode ("\\.org\\'" . org-mode)
:config 
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("report"
               "\\documentclass{report}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("book"
               "\\documentclass{book}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
#+END_SRC

*** Additions

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'visual-line-mode)
(use-package org-bullets
  :config (add-hook 'org-mode-hook 'org-bullets-mode))
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** Title formatting

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-level-1 nil
  :inherit 'outline-1
  :foreground "#909090"
  :background "#000000"
  :weight 'bold
  :font "Noto Sans"
  :height 1.2)

(set-face-attribute 'org-level-2 nil
  :inherit 'outline-1
  :foreground "#b0b0b0"
  :background "#222222"
  :weight 'semi-bold
  :font "Noto Sans"
  :height 1.1)

(set-face-attribute 'org-level-3 nil 
  :inherit 'outline-3
  :foreground "#909090"
  :font "Noto Sans"
  :weight 'bold)

(set-face-attribute 'org-level-4 nil
  :inherit 'outline-3
  :foreground "#909090"
  :font "Noto Sans"
  :weight 'normal)

(set-face-attribute 'org-level-5 nil
  :inherit 'outline-4
  :foreground "#909090"
  :font "Noto Sans"
  :weight 'normal)

(set-face-attribute 'org-level-6 nil
  :inherit 'outline-4
  :foreground "#909090"
  :font "Noto Sans")

(set-face-attribute 'org-level-8 nil
  :inherit 'outline-7
  :foreground "#909090"
  :font "Noto Sans")
#+END_SRC

** LaTeX

I just mercilessly copy andreshp's configuration here.

#+BEGIN_SRC emacs-lisp
(setq LaTeX-math-list
  (quote (
     ("B" "mathbb" "" nil)
     ("K" "mathfrack" "" nil)
     ("R" "mathrm" "" nil)
     ("O" "overline" "" nil)
     ("=" "cong" "" nil)
     ("C-e" "emptyset" "" nil)
     ("<right>" "longrightarrow" "" nil)
     ("<left>" "longleftarrow" "" nil)
     ("C-<right>" "Longrightarrow" "" nil)
     ("C-<left>" "Longleftarrow" "" nil)
     ("^" "widehat" "" nil)
     ("~" "widetilde" "" nil)
     ("'" "partial" "" nil)
     ("0" "varnothing" "" nil)
     ("C-(" "left(" "" nil)
     ("C-)" "right)" "" nil)
     )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package auctex
:defer t
:ensure t
)
(use-package cdlatex
:ensure t
:init
  (setq cdlatex-env-alist
    '(("def" "\\begin{definition}\n\\end{definition}\n" nil)
      ("thm" "\\begin{theorem}\nAUTOLABEL\n\n\\end{theorem}\n" nil)
      ("lem" "\\begin{lemma}\n\\end{lemma}\n" nil)
      ("prop" "\\begin{proposition}\n\\end{proposition}\n" nil)
      ("cor" "\\begin{corollary}\n\\end{corollary}\n" nil)
      ("rem" "\\begin{remark}\n\\end{remark}\n" nil)
      ("proof" "\\begin{proof}\n\\end{proof}\n" nil)
      ("con" "\\begin{conjecture}\nAUTOLABEL\n\n\\end{conjecture}\n" nil)
      ("exe" "\\begin{exercise}\n  \\begin{statement}\n    \n  \\end{statement}\n  \\begin{answer}\n    \n  \\end{answer}\n\\end{exercise}\n" nil)
      ("ex" "\\begin{ex}\n\\end{ex}\n" nil)
      ("cas" "\\begin{cases}?\\end{cases}" nil)))

  (setq cdlatex-command-alist
    '(("def" "Insert definition env" "" cdlatex-environment ("def") t nil)
      ("thm" "Insert theorem env" "" cdlatex-environment ("thm") t nil)
      ("lem" "Insert lemma env" "" cdlatex-environment ("lem") t nil)
      ("prop" "Insert proposition env" "" cdlatex-environment ("prop") t nil)
      ("cor" "Insert corollary env" "" cdlatex-environment ("cor") t nil)
      ("rem" "Insert remark env" "" cdlatex-environment ("rem") t nil)
      ("proof" "Insert proof env" "" cdlatex-environment ("proof") t nil)
      ("eq" "Insert short equation env" "\\[ ? \\]" cdlatex-position-cursor nil t nil)
      ("oi" "Insert an open interval" "]?[" cdlatex-position-cursor nil t t)
      ("exe" "Insert an exercise env" "" cdlatex-environment ("exe") t nil)
      ("ex" "Insert an example env" "" cdlatex-environment ("ex") t nil)
      ("set" "Insert a set" "\\{?\\}" cdlatex-position-cursor nil t t)
      ("frp" "Insert a fraction with partials" "\\frac{\\partial}{\\partial ?}" cdlatex-position-cursor nil t t)
      ("cas" "Insert a cases env" cdlatex-environment ("cas") t t)
      ("lim" "Insert a limit" "\\lim_{x \\to ?} f(x)" cdlatex-position-cursor nil t t)))

  (setq cdlatex-math-symbol-alist
    '((?i ("\\in" "\\infty" "\\imath"))
      (?t ("\\to" "\\times" "\\tau"))
      (?p ("\\pi" "\\varpi"))
      (?p ("\\subset" "\\upsilon"))
      (?n ("\\ne" "\\nu" "\\nabla"))
      (?c ("\\cap" "\\cup" "\\cos"))
      (?: ("\\colon"))
      ;(?< ("\\leftarrow" "\\Leftarrow" "\\longleftarrow" "\\Longleftarrow"))
      ;(?> ("\\rightarrow" "\\Rightarrow" "\\longrightarrow" "\\Longrightarrow"))
  ))

  (setq cdlatex-math-modify-alist
    '((?t "\\text"     "\\text"     t nil nil)
      (?q ("\\mathbb"  nil          t nil nil)
      (?o "\\overline" "\\overline" t nil nil))))

:config
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
)
#+END_SRC

** R

*** Emacs Speaks Statistics

#+BEGIN_SRC emacs-lisp
(use-package ess)
(use-package ess-smart-underscore)
(use-package ess-smart-equals)
#+END_SRC

** Jekyll

#+BEGIN_SRC emacs-lisp
#+END_SRC
* Font setup

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(set-face-attribute 'default t :font "Fira Mono")
#+END_SRC
